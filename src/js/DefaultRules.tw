:: DefaultRules [script]

// this code applies RA rules onto slaves

window.DefaultRules = (function() {
	let V
	let r = ""

	function DefaultRules(slave) {
		let V = State.variables
		let combinedRule = MergeRules(slave)
		if (Object.keys(combinedRule).length === 0) return r // no rules apply
		AssignJobToSlave(slave, combinedRule)
		if(slave.fuckdoll === 0) {
			ProcessClothing(slave, rule)
			ProcessCollar(slave, rule)
			ProcessEyewear(slave, rule)
			ProcessDildos(slave, rule)
			ProcessDickAccessories(slave, rule)
			ProcessAnalAccessories(slave, rule)
			ProcessShoes(slave, rule)
			ProcessBellyAccessories(slave, rule)
		}
		ProcessBellyImplant(slave, combinedRule)
		if (isFertile(slave))
			ProcessFertilityDrugs(slave, rule)
		ProcessAssetGrowthDrugs(slave, rule)
		ProcessOtherDrugs(slave, rule)
		ProcessDiet(slave, rule)
		ProcessCuratives(slave, rule)
		ProcessAphrodisiacs(slave, rule)
		return r
	}

	function MergeRules(slave) {
		// merge all rules applying on a slave into one big rule
		let combinedRule = {}
		V.defaultRules.forEach(rule => {
			rule = clone(rule)
			
			// skip inapplicable rules 
			if (!ruleApplied(slave, rule)) return
			ProcessAssignments(rule)

			// merge the current rule (possibly modified by the code above) into the combined rule 
			combinedRule = mergeRules([combinedRule, rule])
		})
		return combinedRule
	}

	function ProcessAssignments(slave, rule) {
		// Before merging rules, we process assignments for each rule separately so we can remove slaves from facilities when they no longer qualify, even if the final "winning" rule assigns them elsewhere 
		// We also ignore inapplicable assignments for the current slave, so we only merge assignments that are valid 
		switch (rule.setAssignment) {
			case "no default setting":
				delete rule.setAssignment
				break
			
			case "rest":
			case "please you":
				// slaves always qualify for this assignment 
				break

			case "live with your Head Girl":
				if ((V.HGSuiteSlaves < 1 && slave.indentureRestrictions <= 0)) break
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "be confined in the arcade":
				if ((V.arcadeSlaves < V.arcade && slave.indentureRestrictions <= 0 && slave.breedingMark != 1)) true;
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "serve in the master suite":
				if ((V.masterSuiteSlaves < V.masterSuite && (slave.devotion > 20 || slave.trust < -50 || (slave.devotion >= -50 && slave.trust < -20)))) true
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "get treatment in the clinic":
				if ((V.clinicSlaves < V.clinic && (slave.health < 20 || (slave.chem > 15 && V.Nurse != 0 && V.clinicUpgradeFilters == 1)) || ((slave.bellyImplant > -1) && (V.bellyImplants == 1)) || slave.preg > 1)) true
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "rest in the spa":
				if ((V.spaSlaves < V.spa) && (slave.health < 20) || (slave.trust < 60) || (slave.devotion <= 60) || (slave.fetish == "mindbroken") && (slave.devotion >= -20)) true
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "work in the brothel":
				if ((V.brothelSlaves < V.brothel && (slave.devotion > 50 || slave.trust > 50 || slave.trust < -50 || (slave.devotion >= -50 && slave.trust < -20)) && slave.breedingMark != 1)) true
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "serve in the club":
				if ((V.clubSlaves < V.club && (slave.devotion > 50 || slave.trust > 50 || slave.trust < -50 || (slave.devotion >= -50 && slave.trust < -20)) && slave.breedingMark != 1)) true
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "work in the dairy":
				if ((V.dairy > V.dairySlaves+V.bioreactorsXY+V.bioreactorsXX+V.bioreactorsHerm+V.bioreactorsBarren)) {
					if ((slave.indentureRestrictions > 0) && (V.dairyRestraintsSetting > 1)) true
					else if (((slave.indentureRestrictions > 1) && (V.dairyRestraintsSetting > 0)) || (slave.breedingMark == 1 && V.dairyRestriantsSettings > 0) || ((V.dairyPregSetting > 0) && ((slave.bellyImplant != -1) || (slave.broodmother != 0)))) true
					else {
						if ((slave.lactation > 0 || ((V.dairySlimMaintainUpgrade == 0 || V.dairySlimMaintain == 0) && (slave.boobs > 300 || slave.dick == 0 || V.dairyImplantsSetting == 1) && V.dairyImplantsSetting != 2)) || (slave.balls > 0)) {
							if ((slave.devotion > 20) || ((slave.devotion >= -50) && (slave.trust < -20)) || (slave.trust < -50) || (slave.amp == 1) || (V.dairyRestraintsUpgrade == 1)) {
								if ((V.dairyStimulatorsSetting < 2) || (slave.anus > 2) || (V.dairyPrepUpgrade == 1)) {
									if ((V.dairyPregSetting < 2) || (slave.vagina > 2) || (slave.ovaries == 0) || (V.dairyPrepUpgrade == 1)) true
									else {
										RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
										delete rule.setAssignment
									}
								} else {
									RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
									delete rule.setAssignment
								}
							} else {
								RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
								delete rule.setAssignment
							}
						} else {
							RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
							delete rule.setAssignment
						}
					}
				}
				break

			case "work as a servant":
				if ((V.servantsQuartersSlaves < V.servantsQuarters && canSee(slave) && canWalk(slave) && (slave.devotion >= -20 || slave.trust < -20 || (slave.devotion >= -50 && slave.trust <= 20)))) true
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "learn in the schoolroom":
				if ((V.schoolroomSlaves < V.schoolroom && slave.fetish != "mindbroken" && (slave.devotion >= -20 || slave.trust < -50 || (slave.devotion >= -50 && slave.trust < -20))))
					if ((slave.intelligenceImplant < 1) || (slave.voice != 0 && slave.accent+V.schoolroomUpgradeLanguage > 2) || (slave.oralSkill <= 10+V.schoolroomUpgradeSkills*20) || (slave.whoreSkill <= 10+V.schoolroomUpgradeSkills*20) || (slave.entertainSkill <= 10+V.schoolroomUpgradeSkills*20) || (slave.analSkill < 10+V.schoolroomUpgradeSkills*20) || ((slave.vagina >= 0) && (slave.vaginalSkill < 10+V.schoolroomUpgradeSkills*20))) true
					else {
						RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
						delete rule.setAssignment
					}
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "be confined in the cellblock":
				if ((V.cellblockSlaves < V.cellblock && ((slave.devotion < -20 && slave.trust >= -20) || (slave.devotion < -50 && slave.trust >= -50)))) true
				else {
					RAFacilityRemove(slave,rule) // before deleting rule.setAssignment 
					delete rule.setAssignment
				}
				break

			case "take classes":
				if ((!slave.intelligenceImplant && slave.fetish != "mindbroken" && (slave.devotion >= -20 || slave.trust < -50 || (slave.trust < -20 && slave.devotion >= -50)))) true
				else
					delete rule.setAssignment
				true

			case "choose her own job":
				if ((slave.fetish != "mindbroken")) true
				else
					delete rule.setAssignment
				break

			case "get milked":
				if ((slave.lactation > 0 || slave.balls > 0)) true
				else
					delete rule.setAssignment
				break

			case "be a servant":
				if ((canWalk(slave) && canSee(slave) && (slave.devotion >= -20 || slave.trust < -50 || (slave.trust < -20 && slave.devotion >= -50)))) true
				else
					delete rule.setAssignment
				break

			case "work a glory hole":
				if (slave.indentureRestrictions <= 0 && slave.breedingMark != 1) true
				else
					delete rule.setAssignment
				break

			case "whore":
			case "serve the public":
			case "stay confined":
				if ((slave.fuckdoll == 0) && slave.breedingMark != 1) true
				else
					delete rule.setAssignment

			default:
				r += `<span class="red">raWidgets missing case for assignment 'V.{rule.setAssignment}'</span>.`
				break
		}
	}

	function AssignJobToSlave(slave, rule) {
		// place slave on assignment defined by the rule
		if ((rule.setAssignment !== undefined && rule.setAssignment != "no default setting")) {
			if (((rule.setAssignment == "choose her own job" && !slave.choosesOwnAssignment) || rule.setAssignment != slave.assignment)) {
				switch (rule.setAssignment) {
					case "live with your Head Girl":
						r = `<br>${slave.slaveName} has been automatically assigned to live in your Head Girl's private suite.`
						break
					case "be confined in the arcade":
						r = `<br>${slave.slaveName} has been automatically assigned to be confined in ${V.arcadeName}.`
						break
					case "serve in the master suite":
						r = `<br>${slave.slaveName} has been automatically assigned to {V.masterSuiteName}.`
						break
					case "get treatment in the clinic":
						r = `<br>${slave.slaveName} has been automatically assigned to get treatment in {V.clinicName}.`
						break
					case "rest in the spa":
						r = `<br>${slave.slaveName} has been automatically assigned to rest in ${V.spaName}.`
						break
					case "work in the brothel":
						r = `<br>${slave.slaveName} has been automatically assigned to work in ${V.brothelName}.`
						break
					case "serve in the club":
						r = `<br>${slave.slaveName} has been automatically assigned to serve in ${V.clubName}.`
						break
					case "work in the dairy":
						r = `<br>${slave.slaveName} has been automatically assigned to be milked in ${V.dairyName}.`
						break
					case "work as a servant":
						r = `<br>${slave.slaveName} has been automatically assigned to work in ${V.servantsQuartersName}.`
						break
					case "work as a servant":
						r = `<br>${slave.slaveName} has been automatically assigned to work in ${V.servantsQuartersName}.`
						break
					case "learn in the schoolroom":
						r = `<br>${slave.slaveName} has been automatically assigned to study in ${V.schoolroomName}.`
						break
					case "be confined in the cellblock":
						r = `<br>${slave.slaveName} has been automatically assigned to be confined in ${V.cellblockName}.`
						break
					case "choose her own job":
						r = `<br>${slave.slaveName} is now allowed to select her own assignments.`
						break
					default:
						r = `<br>${slave.slaveName} has been automatically assigned to rule.setAssignment.`
						break
				}
				assignJob(slave, rule.setAssignment)
			}
		}
	}

	function ProcessClothing(slave, rule) {
		// apply clothes to slave
		if ((rule.clothes !== undefined) && (rule.clothes !== "no default setting")) {
			if ((rule.clothes == "choosing her own clothes")) {
				if ((slave.choosesOwnClothes == 0)) {
					slave.clothes = "choosing her own clothes"
					slave.choosesOwnClothes = 1
					r += `<br>${slave.slaveName} is now allowed to choose her own clothes.`
				}
			} else if ((slave.clothes !== rule.clothes)) {
				slave.clothes = rule.clothes
				slave.choosesOwnClothes = 0
				r += `<br>${slave.slaveName} is now wearing ${slave.clothes}.`
			}
		}
	}

	function ProcessCollar(slave, rule) {
		// apply collar to slave
		if ((rule.collar !== undefined) && (rule.collar != "no default setting")) {
			if ((slave.collar !== rule.collar)) {
				r += '<br>'
				if ((rule.collar == "preg biometrics" && slave.preg <= -1)) {
					slave.collar = "none"
					r += `${slave.slaveName} can not utilize preg biometrics.`
				} else if ((rule.collar == "massive dildo gag" && slave.oralSkill <= 50)) {
					slave.collar = "none"
					r += `${slave.slaveName} lacks the oral skill to successfully keep the massive dildo gag in her throat.`
				} else
					slave.collar = rule.collar
				if ((slave.collar == "none"))
					r += `${slave.slaveName} has been given no collar.`
				else
					r += `${slave.slaveName} has been given a slave.collar collar.`
			}
		}
	}

	function ProcessEyewear(slave, rule) {
		// apply glasses, contacts to slave
		if ((rule.eyewear !== undefined) && (rule.eyewear !== "no default setting")) {
			switch (rule.eyewear) {
				case "correct with glasses":
					if (slave.eyes == -1) {
						if (slave.eyewear != "corrective glasses") {
							slave.eyewear = "corrective glasses"
							V.cash -= V.modCost
							r += `<br>${slave.slaveName} has been given corrective glasses.`
						}
					} else {
						if (slave.eyewear != "none") {
							slave.eyewear = "none"
							r += `<br>${slave.slaveName}'s eyewear has been removed.`
						}
					}
					break

				case "correct with contacts":
					if (slave.eyes == -1) {
						if (slave.eyewear != "corrective contacts") {
							slave.eyewear = "corrective contacts"
							V.cash -= V.modCost
							r += `<br>${slave.slaveName} has been given corrective contacts.`
						}
					} else {
						if (slave.eyewear != "none") {
							slave.eyewear = "none"
							r += `<br>${slave.slaveName}'s eyewear has been removed.`
						}
					}
					break

				case "blur with glasses":
					if (slave.eyes > -1) {
						if (slave.eyewear != "blurring glasses") {
							slave.eyewear = "blurring glasses"
							V.cash -= V.modCost
							r += `<br>${slave.slaveName} has been given blurring glasses.`
						}
					} else {
						if (slave.eyewear != "none") {
							slave.eyewear = "none"
							r += `<br>${slave.slaveName}'s eyewear has been removed.`
						}
					}
					break

				case "blur with contacts":
					if (slave.eyes > -1) {
						if (slave.eyewear != "blurring contacts") {
							slave.eyewear = "blurring contacts"
							V.cash -= V.modCost
							r += `<br>${slave.slaveName} has been given blurring contacts.`
						}
					} else {
						if (slave.eyewear != "none") {
							slave.eyewear = "none"
							r += `<br>Since ${slave.slaveName}'s eyewear has been removed.`
						}
					}
					break

				case "universal glasses":
					if (slave.eyes == -1) {
						if (slave.eyewear != "corrective glasses") {
							slave.eyewear = "corrective glasses"
							V.cash -= V.modCost
							r += `<br>${slave.slaveName} has been given corrective glasses.`
						}
					} else {
						if (slave.eyewear != "glasses") {
							slave.eyewear = "glasses"
							V.cash -= V.modCost
							r += `<br>${slave.slaveName} has been given decorative glasses.`
						}
					}
					break

				default:
					if (slave.eyewear != "none") {
						slave.eyewear = "none"
						r += `<br>${slave.slaveName}'s eyewear has been removed.`
					}
					break
			}
		}
	}

	function ProcessDildos(slave, rule) {
		// apply vaginal dildos to slave
		if (slave.vagina == 0)
			ProcessVVirginDildos(slave, rule)
		else if ((slave.vagina > 0) && (slave.anus == 0))
			ProcessAVirginDildos(slave, rule)
		else if (slave.vagina > 0)
			ProcessNonVirginDildos(slave, rule)
	}

	function ProcessVVirginDildos(slave, rule) {
		// apply vaginal dildos to varginal virgins
		if ((rule.virginAccessory !== undefined) && (rule.virginAccessory !== "no default setting")) {
			if (slave.vaginalAccessory !== rule.virginAccessory) {
				slave.vaginalAccessory = rule.virginAccessory
				switch (slave.vaginalAccessory) {
					case "huge dildo":
						r += `<br>${slave.slaveName} is a virgin and has been given a`
						if (slave.vagina >= 2)
							r += `massive dildo to permanently gape her cunt.`
						else {
							r += `large dildo for her pussy, since it must be stretched before it can accommodate a huge one.`
							slave.vaginalAccessory = "large dildo"
						}
						break

					case "long dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so the virgin ${slave.slaveName} has been given a standard length dildo for her pussy.`
							slave.vaginalAccessory = "dildo"
						}
						break

					case "long, large dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so the virgin ${slave.slaveName} has been given a standard length large dildo for her pussy.`
							slave.vaginalAccessory = "large dildo"
						}
						break

					case "long, huge dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so the virgin ${slave.slaveName} has been given a standard length huge dildo for her pussy.`
							slave.vaginalAccessory = "huge dildo"
						} else {
							r += `<br>slave.slaveName is a virgin and has been given a`
							if (slave.vagina >= 2)
								r += `massive and oversized dildo to permanently gape her cunt.`
							else {
								r += `long, large dildo for her pussy, since it must be stretched before it can accommodate a huge one.`
								slave.vaginalAccessory = "long, large dildo"
							}
						}
						break

					case "none":
						r += `<br>${slave.slaveName} is a virgin and has been instructed not to use a vaginal accessory.`
						break

					default:
						r += `<br>${slave.slaveName} is a virgin and has been given a slave.vaginalAccessory for her pussy.`
						break
				}
			}
		}
	}

	function ProcessAVirginDildos(slave, rule) {
		// apply vaginal dildos to anal virgins
		if ((rule.aVirginAccessory !== undefined) && (rule.aVirginAccessory !== "no default setting")) {
			if (slave.vaginalAccessory !== rule.aVirginAccessory) {
				slave.vaginalAccessory = rule.aVirginAccessory
				switch (slave.vaginalAccessory) {
					case "huge dildo":
						r += `<br>${slave.slaveName} is a virgin and has been given a`
						if (slave.vagina >= 2)
							r += `massive dildo to permanently gape her cunt.`
						else {
							r += `large dildo for her pussy, since it must be stretched before it can accommodate a huge one.`
							slave.vaginalAccessory = "large dildo"
						}
						break

					case "long dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so the virgin ${slave.slaveName} has been given a standard length dildo for her pussy.`
							slave.vaginalAccessory = "dildo"
						}
						break

					case "long, large dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so the virgin ${slave.slaveName} has been given a standard length large dildo for her pussy.`
							slave.vaginalAccessory = "large dildo"
						}
						break

					case "long, huge dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so the virgin ${slave.slaveName} has been given a standard length huge dildo for her pussy.`
							slave.vaginalAccessory = "huge dildo"
						} else {
							r += `<br>${slave.slaveName} is a virgin and has been given a`
							if (slave.vagina >= 2)
								r += `massive and oversized dildo to permanently gape her cunt.`
							else {
								r += `long, large dildo for her pussy, since it must be stretched before it can accommodate a huge one.`
								slave.vaginalAccessory = "long, large dildo"
							}
						}
						break

					case "none":
						r += `<br>slave.slaveName is a virgin and has been instructed not to use a vaginal accessory.`
						break

					default:
						r += `<br>slave.slaveName is a virgin and has been given a slave.vaginalAccessory for her pussy.`
						break
				}
			}
		}
	}

	function ProcessNonVirginDildos(slave, rule) {
		// apply vaginal dildos to non-virgins
		if ((rule.vaginalAccessory !== undefined) && (rule.vaginalAccessory !== "no default setting")) {
			if (slave.vaginalAccessory !== rule.vaginalAccessory) {
				slave.vaginalAccessory = rule.vaginalAccessory
				switch (slave.vaginalAccessory) {
					case "huge dildo":
						r += `<br>${slave.slaveName} has been given a`
						if (slave.vagina >= 2)
							r += `massive dildo to permanently gape her cunt.`
						else {
							r += `large dildo for her pussy, since it must be stretched before it can accommodate a huge one.`
							slave.vaginalAccessory = "large dildo"
						}
						break

					case "long dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so ${slave.slaveName} has been given a standard length dildo for her pussy.`
							slave.vaginalAccessory = "dildo"
						}
						break

					case "long, large dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so ${slave.slaveName} has been given a standard length large dildo for her pussy.`
							slave.vaginalAccessory = "large dildo"
						}
						break

					case "long, huge dildo":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of cervix penetrating dildos on marked slaves, so ${slave.slaveName} has been given a standard length huge dildo for her pussy.`
							slave.vaginalAccessory = "huge dildo"
						} else {
							r += `<br>${slave.slaveName} has been given a`
							if (slave.vagina >= 2)
								r += `massive and oversized dildo to permanently gape her cunt.`
							else {
								r += `long, large dildo for her pussy, since it must be stretched before it can accommodate a huge one.`
								slave.vaginalAccessory = "long, large dildo"
							}
						}
					case "none":
						r += `<br>${slave.slaveName} has been instructed not to use a vaginal accessory.`
						break

					default:
						r += `<br>${slave.slaveName} has been given a slave.vaginalAccessory for her pussy.`
						break
				}
			}
		}
	}

	function ProcessDickAccessories(slave, rule) {
		// apply dick accessories to slave
		if ((slave.dick > 0)) {
			if (slave.anus == 0) {
				if ((rule.aVirginDickAccessory !== undefined) && (rule.aVirginDickAccessory !== "no default setting")) {
					if ((slave.dickAccessory !== rule.aVirginDickAccessory)) {
						slave.dickAccessory = rule.aVirginDickAccessory
						if (slave.dickAccessory == "none")
							r += `<br>${slave.slaveName} is a virgin and has been instructed not to wear a dick accessory.`
						else
							r += `<br>${slave.slaveName} is a virgin and has been given a ${slave.dickAccessory} accessory for her cock.`
					}
				}
			} else {
				if ((rule.dickAccessory !== undefined) && (rule.dickAccessory !== "no default setting")) {
					if ((slave.dickAccessory !== rule.dickAccessory)) {
						slave.dickAccessory = rule.dickAccessory
						if (slave.dickAccessory == "none")
							r += `<br>${slave.slaveName} has been instructed not to wear a dick accessory.`
						else
							r += `<br>${slave.slaveName} has been given a slave.dickAccessory accessory for her cock.`
					}
				}
			}
		}
	}

	function ProcessShoes(slave, rule) {
		// apply shoes to slave
		if ((rule.shoes !== undefined) && (rule.shoes !== "no default setting")) {
			if ((slave.shoes !== rule.shoes)) {
				if ((slave.amp != 1)) {
					slave.shoes = rule.shoes
					r += `<br>${slave.slaveName}'s shoes have been set to ${slave.shoes}.`
				}
			}
		}
	}

	function ProcessBellyAccessories(slave, rule) {
		// apply belly accessories to slave
		if ((rule.bellyAccessory !== undefined) && (rule.bellyAccessory !== "no default setting")) {
			if ((slave.bellyAccessory !== rule.bellyAccessory)) {
				if ((slave.belly >= 1500 || slave.weight >= 130) && setup.fakeBellies.includes(rule.bellyAccessory)) {
					r += `<br>${slave.slaveName}'s natural belly is too big to properly wear an empathy belly.`
					slave.bellyAccessory = "none"
				} else {
					slave.bellyAccessory = rule.bellyAccessory
					if (slave.bellyAccessory == "none")
						r += `<br>${slave.slaveName} has been instructed not to wear a torso accessory.`
					else
						r += `<br>${slave.slaveName} has been given ${slave.bellyAccessory} to wear.`
				}
			}
		}
	}

	function ProcessAnalAccessories(slave, rule) {
		// apply buttplugs to slave
		if ((slave.vaginalAccessory !== "anal chastity") && (slave.vaginalAccessory !== "combined chastity") && (slave.dickAccessory !== "anal chastity") && (slave.dickAccessory !== "combined chastity")) {
			if (slave.anus == 0)
				ProcessAnalVirginButtplugs(slave, rule)
			else
				ProcessNonVirginButtplugs(slave, rule)
		}
	}

	function ProcessAnalVirginButtplugs(slave, rule) {
		// apply buttplugs to virgins
		if ((rule.aVirginButtplug !== undefined) && (rule.aVirginButtplug !== "no default setting")) {
			if ((slave.buttplug !== rule.aVirginButtplug)) {
				slave.buttplug = rule.aVirginButtplug
				switch (slave.buttplug) {
					case "huge plug":
						r += `<br>${slave.slaveName} is an anal virgin and has been given a`
						if ((slave.anus >= 2))
							r += `massive plug to permanently gape her asshole.`
						else {
							slave.buttplug = "large plug"
							r += `large buttplug for her asshole, since it must be stretched before it can accommodate a huge one.`
						}
						break

					case "long plug":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of anal plugs that can damage a growing fetus on marked slaves, so the anal virgin ${slave.slaveName} has been given a standard length plug for her anus.`
							slave.buttplug = "plug"
						}
						break

					case "long, large plug":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of anal plugs that can damage a growing fetus on marked slaves, so the anal virgin ${slave.slaveName} has been given a standard length large plug for her anus.`
							slave.buttplug = "large plug"
						}
						break

					case "long, huge plug":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of anal plugs that can damage a growing fetus on marked slaves, so the anal virgin ${slave.slaveName} has been given a standard length huge plug for her anus.`
							slave.buttplug = "huge plug"
						} else {
							r += `<br>slave.slaveName is an anal virgin and has been given a`
							if (slave.anus >= 2)
								r += `massive and oversized plug to permanently gape her asshole.`
							else {
								r += `long, large buttplug for her asshole, since it must be stretched before it can accommodate a huge one.`
								slave.buttplug = "long, large plug"
							}
						}
						break

					case "none":
						r += `<br>${slave.slaveName} is an anal virgin and has been instructed not to use an anal accessory.`
						break

					default:
						r += `<br>${slave.slaveName} is an anal virgin and has been given a slave.buttplug for her asshole.`
						break
				}
			}
		}
	}

	function ProcessNonVirginButtplugs(slave, rule) {
		// apply buttplugs to non-virgins
		if ((rule.buttplug !== undefined) && (rule.buttplug !== "no default setting")) {
			if ((slave.buttplug !== rule.buttplug)) {
				slave.buttplug = rule.buttplug
				switch (slave.buttplug) {
					case "huge plug":
						r += `<br>${slave.slaveName} has been given a`
						if ((slave.anus >= 2))
							r += `massive plug to permanently gape her asshole.`
						else {
							slave.buttplug = "large plug"
							r += `large buttplug for her asshole, since it must be stretched before it can accommodate a huge one.`
						}
						break

					case "long plug":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of anal plugs that can damage a growing fetus on marked slaves, so ${slave.slaveName} has been given a standard length plug for her anus.`
							slave.buttplug = "plug"
						}
						break
						
					case "long, large plug":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of anal plugs that can damage a growing fetus on marked slaves, so ${slave.slaveName} has been given a standard length large plug for her anus.`
							slave.buttplug = "large plug"
						}
						break

					case "long, huge plug":
						if (slave.breedingMark == 1) {
							r += `<br>Breeding regulations forbid the use of anal plugs that can damage a growing fetus on marked slaves, so ${slave.slaveName} has been given a standard length huge plug for her anus.`
							slave.buttplug = "huge plug"
						} else {
							r += `<br>${slave.slaveName} has been given a`
							if (slave.anus >= 2)
								r += `massive and oversized plug to permanently gape her asshole.`
							else {
								r += `long, large buttplug for her asshole, since it must be stretched before it can accommodate a huge one.`
								slave.buttplug = "long, large plug"
							}
						}
						break

					case "none":
						r += `<br>${slave.slaveName} has been instructed not to use an anal accessory.`
						break

					default:
						r += `<br>${slave.slaveName} has been given a slave.buttplug for her asshole.`
						break
				}
			}
		}
	}

	function ProcessBellyImplant(slave, rule) {
		// Here is belly implant size control, it's used in Surgery Degradation passage to setup devotion and trust changes.
		// silent calls to surgery degradation have been replaced with a js function, which is less hacky
		if ((rule.bellyImplantVol !== undefined) && slave.bellyImplant >= 0 && rule.bellyImplantVol >= 0) {
			r += "<br>"
			if (slave.health > -10 ) {
				let diff = rule.bellyImplantVol - slave.bellyImplant
				if (diff >= 5000 && slave.bellyPain == 0 && slave.health > 50) {
					r += `${slave.slaveName}'s belly is way too small, so she has been directed to have intensive belly implant filling procedures throughout this week.`
					slave.bellyImplant += 1000
					slave.bellyPain += 2
					BellySurgery(slave, diff)
				} else if (diff >= 500 && slave.bellyPain < 2 ) {
					r += `${slave.slaveName}'s belly has not reached the desired size, so she has been directed to have belly implant filling procedures throughout this week.`
					slave.bellyImplant += 500
					slave.bellyPain += 1
					BellySurgery(slave, diff)
				} else if (diff <= -5000 ) {
					r += `${slave.slaveName}'s belly is way too big, so she has been directed to have intensive belly implant draining procedures throughout this week.`
					slave.bellyImplant -= 1000
					BellySurgery(slave, diff)
				} else if (diff <= -500 ) {
					r += `${slave.slaveName}'s belly is too big, so she has been directed to have belly implant draining procedures throughout this week.`
					slave.bellyImplant -= 500
					BellySurgery(slave, diff)
				}
			} else {
				r += `${slave.slaveName} is not healthy enough to safely adjust her belly implant.`
			}
		}
	}

	function BellySurgery(slave, volume) {
		// this is a port of the belly implant portion of surgeryDegradation.tw
		// that way, we don't have to use ugly hacks
		// the original still exists, and may be worth replacing
		if (volume > 0) { // bellyUp
			SetBellySize(slave)
			if (slave.bellyPain === 1) {
				if (slave.devotion > 50) {
					slave.devotion += 4
				} else if (slave.devotion >= -20) {
					slave.trust -= 5
				} else {
					slave.trust -= 10
					slave.devotion -= 5
				}
			} else if (slave.bellyPain === 2) {
				if (slave.devotion > 50) {
					slave.devotion += 2
				} else if (slave.devotion >= -20) {
					slave.trust -= 7
				} else {
					slave.trust -= 12
					slave.devotion -= 7
				}
			}
		} else { // bellyDown
			if (slave.bellyImplant < 0)
				slave.bellyImplant = 0
			SetBellySize(slave)
			if (slave.devotion > 50) {
				slave.devotion += 3
				slave.trust += 3
			} else if (slave.devotion >= -20) {
				slave.trust += 2
			} else {
				slave.devotion += 1
				slave.trust -= 10
			}
		}
	}

	function ProcessFertilityDrugs(slave, rule) {
		// Fertility 
		if ((rule.preg !== undefined) && (rule.preg !== "no default setting")) {
			if ((rule.preg == -1)) {
				if (slave.preg !== -1) {
					r += `<br>${slave.slaveName} is fertile, so she has been put on the appropriate contraceptive regime.`
					slave.preg = -1
				}
				if (slave.drugs == "fertility drugs" || slave.drugs == "super fertility drugs") {
					slave.drugs = "no drugs"
				}
			} else if ((rule.preg == 0)) {
				if (slave.preg !== 0) {
					r += `<br>${slave.slaveName} is fertile, so she has been taken off contraceptives.`
					slave.preg = 0
				}
				if (slave.drugs == "fertility drugs" || slave.drugs == "super fertility drugs") {
					slave.drugs = "no drugs"
				}
			} else if ((rule.preg == 1)) {
				if (slave.preg !== 0 || slave.drugs !== "fertility drugs" || slave.hormones !== 0) {
					slave.preg = 0
					slave.drugs = "fertility drugs"
					slave.hormones = 0
					r += `<br>${slave.slaveName} is fertile, so she has been put on the appropriate fertility regime.`
				}
			} else if ((rule.preg == 2)) {
				if (slave.preg !== 0 || slave.drugs !== "fertility drugs" || slave.hormones !== 2) {
					slave.preg = 0
					slave.drugs = "fertility drugs"
					slave.hormones = 2
					r += `<br>${slave.slaveName} is fertile, so she has been put on the appropriate fertility regime.`
				}
			} else if ((rule.preg == 3) && slave.indentureRestrictions < 1) {
				if (slave.preg !== 0 || slave.drugs !== "super fertility drugs" || slave.hormones !== 0) {
					slave.preg = 0
					slave.drugs = "super fertility drugs"
					slave.hormones = 0
					r += `<br>${slave.slaveName} is fertile, so she has been put on the appropriate fertility regime.`
				}
			} else if ((rule.preg == 4) && slave.indentureRestrictions < 1) {
				if (slave.preg !== 0 || slave.drugs !== "super fertility drugs" || slave.hormones !== 2) {
					slave.preg = 0
					slave.drugs = "super fertility drugs"
					slave.hormones = 2
					r += `<br>${slave.slaveName} is fertile, so she has been put on the appropriate fertility regime.`
				}
			}
		}
	}

	function ProcessAssetGrowthDrugs(slave, rule) {
		// Asset Growth 
		growth_drugs = new Set(["breast injections", "intensive breast injections", "breast redistributors", "butt injections", "intensive butt injections", "butt redistributors", "lip injections", "lip atrophiers", "penis enhancement", "intensive penis enhancement", "penis atrophiers", "testicle enhancement", "intensive testicle enhancement", "testicle atrophiers", "hyper breast injections", "hyper butt injections", "hyper penis enhancement", "hyper testicle enhancement"])
		if ((slave.drugs == "super fertility drugs" || slave.drugs == "fertility drugs") && isFertile(slave)) {
			r += `<br>slave.slaveName is on slave.drugs and will not be considered for drug enhancement until that regime is complete.`
			return
		} else if ((rule.growth.boobs == "no default setting" && rule.growth.butt == "no default setting" && rule.growth.lips == "no default setting" && rule.growth.dick == "no default setting" && rule.growth.dick == "no default setting" && rule.growth.balls == "no default setting")) {
			return
		}
		if (slave.assignmentVisible) { // More resource intensive version with prioritizing. Possible to give this a toggle rather than basing it on visibility. 
			let _priorities = []
			if (rule.growth.boobs != "no default setting") {
				let _priority
				if (slave.boobs < rule.growth.boobs) {
					_priority = {drug: "breast injections", weight: (rule.growth.boobs-slave.boobs)/rule.growth.boobs}
					_priorities.push(_priority)
				} else if ((slave.boobs > rule.growth.boobs+200) && slave.weight < 100 && (V.arcologies[0].FSSlimnessEnthusiastResearch == 1)) {
					_priority = {drug: "breast redistributors", weight: (1+((slave.boobs-slave.boobsImplant-rule.growth.boobs)/rule.growth.boobs))}, _priorities.push(_priority)
				}
			}
			if (rule.growth.butt != "no default setting") {
				let _priority
				if (slave.butt < rule.growth.butt) {
					_priority = {drug: "butt injections", weight: (rule.growth.butt-slave.butt)/rule.growth.butt}
					_priorities.push(_priority)
				} else if ((Math.trunc(slave.butt) > rule.growth.butt) && slave.weight < 100 && (V.arcologies[0].FSSlimnessEnthusiastResearch == 1)) {
					_priority = {drug: "butt redistributors", weight: (1+((slave.butt-slave.buttImplant-rule.growth.butt)/rule.growth.butt))}, _priorities.push(_priority)
				}
			}
			if (rule.growth.lips != "no default setting") {
				let _priority
				if (slave.lips < rule.growth.lips) {
					_priority = {drug: "lip injections", weight: (rule.growth.lips-slave.lips)/rule.growth.lips}
					_priorities.push(_priority)
				} else if ((slave.lips > rule.growth.lips) && (V.arcologies[0].FSSlimnessEnthusiastResearch == 1)) {
					_priority = {drug: "lip atrophiers", weight: (1+((slave.lips-slave.lipsImplant-rule.growth.lips)/rule.growth.lips))}, _priorities.push(_priority)
				}
			}
			if (rule.growth.dick != "no default setting" && slave.dick) {
				let _priority
				if (slave.dick < rule.growth.dick) {
					_priority = {drug: "penis enhancement", weight: (rule.growth.dick-slave.dick)/rule.growth.dick}
					_priorities.push(_priority)
				} else if ((slave.dick > rule.growth.dick) && (V.arcologies[0].FSSlimnessEnthusiastResearch == 1)) {
					_priority = {drug: "penis atrophiers", weight: (1+((slave.dick-rule.growth.dick)/rule.growth.dick))}, _priorities.push(_priority)
				}
			}
			if (rule.growth.balls != "no default setting" && slave.balls) {
				let _priority
				if (slave.balls < rule.growth.balls) {
					_priority = {drug: "testicle enhancement", weight: (rule.growth.balls-slave.balls)/rule.growth.balls}
					_priorities.push(_priority)
				} else if ((slave.balls > rule.growth.balls) && (V.arcologies[0].FSSlimnessEnthusiastResearch == 1)) {
					_priority = {drug: "testicle atrophiers", weight: (1+((slave.balls-rule.growth.balls)/rule.growth.balls))}, _priorities.push(_priority)
				}
			}
			if (_priorities.length > 1) {
				_priorities = _priorities.sort(function(a, b){if(a.weight > b.weight) return -1; if(a.weight < b.weight) return 1; return 0;})
				if (slave.drugs != _priorities[0].drug) {
					slave.drugs = _priorities[0].drug
					r += `<br>${slave.slaveName} has been put on `
					if (rule.growth.intensity && slave.drugs != "lip injections" && slave.health > 0) {
						slave.drugs = "intensive " + slave.drugs
						r += `${slave.drugs}, since she's healthy enough to take them, and `
					} else {
						r += `${slave.drugs}, since`
					}
					r += `that part of her body is ${Math.trunc(_priorities[0].weight*100)}>>% `
					if (_priorities[0].weight < 1) r+= "below "
					else r+= "above "
					r += "the targeted size."
				}
				return
			} else if (_priorities.length > 0) {
				if (slave.drugs != _priorities[0].drug) {
					slave.drugs = _priorities[0].drug
					r += `<br>${slave.slaveName} has been put on `
					if (rule.growth.intensity && slave.drugs != "lip injections" && slave.health > 0) {
						slave.drugs = "intensive " + slave.drugs
						r += `${slave.drugs}, since she's healthy enough to take them, and `
					} else
						r += `${slave.drugs}, since `
					r += `that is the only part of her body that does not meet the targeted size.`
				}
				return
			} else if (growth_drugs.has(slave.drugs)) {
				slave.drugs = "no drugs"
				r += `<br>${slave.slaveName}'s body has met all relevant growth targets, so her pharmaceutical regime has been ended.`
				return
			}
		} else {
			let _hyper
			if (V.arcologies[0].FSAssetExpansionistResearch == 1)
				_hyper = "hyper "
			else
				_hyper = ""
			if (rule.growth.boobs != "no default setting") {
				if (slave.boobs < rule.growth.boobs) {
					if (slave.drugs != _hyper + "breast injections") {
						slave.drugs = _hyper + "breast injections"
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					}
					return
				}
			}
			if (rule.growth.butt != "no default setting") {
				if (slave.butt < rule.growth.butt) {
					if (slave.drugs != _hyper + "butt injections") {
						slave.drugs = _hyper + "butt injections"
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					}
					return
				}
			}
			if (rule.growth.lips != "no default setting") {
				if (slave.lips < rule.growth.lips) {
					if (slave.drugs != "lip injections") {
						slave.drugs = "lip injections"
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					}
					return
				}
			}
			if (rule.growth.dick != "no default setting" && slave.dick) {
				if (slave.dick < rule.growth.dick) {
					if (slave.drugs != _hyper + "penis enhancement") {
						slave.drugs = _hyper + "penis enhancement"
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					}
					return
				}
			}
			if (rule.growth.balls != "no default setting" && slave.balls) {
				if (slave.balls < rule.growth.balls) {
					if (slave.drugs != _hyper + "testicle enhancement") {
						slave.drugs = _hyper + "testicle enhancement"
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					}
					return
				}
			}
			if (V.arcologies[0].FSSlimnessEnthusiastResearch == 1) {
				if (rule.growth.boobs != "no default setting") {
					if (slave.boobs-slave.boobsImplant > rule.growth.boobs+200 && slave.weight < 100) {
						if (slave.drugs != "breast redistributors") {
							slave.drugs = "breast redistributors"
							r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
						}
						return
					}
				}
				if (rule.growth.butt != "no default setting") {
					if (Math.trunc(slave.butt-slave.buttImplant) > rule.growth.butt && slave.weight < 100) {
						if (slave.drugs != "butt redistributors") {
							slave.drugs = "butt redistributors"
							r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
						}
						return
					}
				}
				if (rule.growth.lips != "no default setting") {
					if (slave.lips-slave.lipsImplant > rule.growth.lips) {
						if (slave.drugs != "lip atrophiers") {
							slave.drugs = "lip atrophiers"
							r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
						}
						return
					}
				}
				if (rule.growth.dick != "no default setting" && slave.dick) {
					if (slave.dick > rule.growth.dick) {
						if (slave.drugs != "penis atrophiers") {
							slave.drugs = "penis atrophiers"
							r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
						}
						return
					}
				}
				if (rule.growth.balls != "no default setting" && slave.balls) {
					if (slave.balls > rule.growth.balls) {
						if (slave.drugs != "testicle atrophiers") {
							slave.drugs = "testicle atrophiers"
							r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
						}
						return
					}
				}
			}
			if (growth_drugs.has(slave.drugs)) {
				slave.drugs = "no drugs"
				r += `<br>${slave.slaveName} has met all relevant growth targets, so her pharmaceutical regime has been ended.`
				return
			}
		}
	}

	function ProcessOtherDrugs(slave, rule) {
		// Other Drugs 
		const drugs = new Set(["psychosuppressants", "no drugs", "steroids", "hormone enhancers", "hormone blockers", "anti-aging cream", "growth stimulants", "sag-B-gone", "male hormone injections", "female hormone injections", "none"])
		if (drugs.has(rule.drug)) {
			if (drugs.has(slave.drugs) && (slave.drugs != rule.drug)) {
				switch (rule.drug) {
				case "anti-aging cream":
					if (slave.visualAge > 18) {
						slave.drugs = rule.drug 
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					} else {
						slave.drugs = "no drugs" 
						r += `<br>${slave.slaveName} can not benefit from her assigned drug and has been defaulted to ${slave.drugs}.`
					}
					break

				case "growth stimulants":
					if (slave.height < 274 && slave.height < Math.clamp((Height.mean(slave) * 1.25),0,274)) {
						slave.drugs = rule.drug 
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					} else {
						slave.drugs = "no drugs" 
						r += `<br>${slave.slaveName} can not benefit from her assigned drug and has been defaulted to ${slave.drugs}.`
					}
					break

				case "sag-B-gone":
					if (slave.boobs > 250 && slave.boobShape != "saggy") {
						slave.drugs = rule.drug 
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					} else {
						slave.drugs = "no drugs" 
						r += `<br>${slave.slaveName} can not benefit from her assigned drug and has been defaulted to ${slave.drugs}.`
					}
					break

				case "female hormone injections":
					if (slave.breedingMark != 1 && (slave.ovaries == 1 || slave.mpreg == 1) && slave.pubertyXX == 0) {
						slave.drugs = rule.drug 
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					} else {
						slave.drugs = "no drugs" 
						r += `<br>${slave.slaveName} can not benefit from her assigned drug and has been defaulted to ${slave.drugs}.`
					}
					break

				case "male hormone injections":
					if (slave.breedingMark != 1 && slave.balls > 0 && slave.pubertyXY == 0) {
						slave.drugs = rule.drug 
						r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					} else {
						slave.drugs = "no drugs" 
						r += `<br>${slave.slaveName} can not benefit from her assigned drug and has been defaulted to ${slave.drugs}.`
					}
					break

				default:
					slave.drugs = rule.drug 
					r += `<br>${slave.slaveName} has been put on ${slave.drugs}.`
					break
				}
			}
		}
	}

	function ProcessDiet(slave, rule) {
		// Diet Setting 
		if ((rule.diet !== undefined) && (rule.diet !== "no default setting")) {
			if ((slave.boobs >= 1600) && (slave.muscles <= 5) && (slave.amp != 1) && ((rule.muscles == "no default setting") || (rule.muscles == 0))) {
				if ((slave.diet !== "muscle building")) {
					slave.diet = "muscle building"
					r += `<br>${slave.slaveName} has big tits and no back muscles, so she's been assigned to gain some.`
				}
			} else if ((slave.boobs >= 1600) && (slave.muscles > 5) && (slave.diet == "muscle building") && ((rule.muscles == "no default setting") || (rule.muscles == 0))) {
				slave.diet = "healthy"
				r += `<br>${slave.slaveName} has huge boobs, but she already has the back muscles to bear them, so she's been assigned to stop working out so hard.`
			} else if ((rule.dietGrowthSupport == 1) && ((slave.drugs == "breast injections") || (slave.drugs == "butt injections")) && (slave.weight <= 95)) {
				if (slave.diet !== "fattening") {
					slave.diet = "fattening"
					r += `<br>${slave.slaveName} is on drugs designed to expand major body parts, so she's been put on a fattening diet to provide her body as much fuel for growth as possible.`
				}
			} else {
				if ((rule.diet == 0)) {
					if ((slave.weight > 10)) {
						if ((slave.diet !== "restricted")) {
							slave.diet = "restricted"
							r += `<br>${slave.slaveName} is too fat so her diet has been set to restricted.`
						}
						if (($arcologies[0].FSSlimnessEnthusiastResearch == 1 && (slave.drugs == "no drugs" || slave.drugs == "none"))) {
							slave.drugs = "appetite suppressors"
							r += `<br>${slave.slaveName} is too fat so she will be given weight loss pills.`
						}
					} else if ((slave.weight < -10)) {
						if ((slave.diet !== "fattening")) {
							slave.diet = "fattening"
							r += `<br>${slave.slaveName} is too skinny so her diet has been set to fattening.`
						}
						if ((slave.drugs == "appetite suppressors")) {
							slave.drugs = "no drugs"
							r += `<br>${slave.slaveName} is too skinny so she will no longer be given weight loss pills.`
						}
					} else if ((rule.muscles !== undefined) && (rule.muscles !== "no default setting") && (slave.amp != 1)) {
						if ((slave.muscles >= rule.muscles+8)) {
							if ((slave.diet !== "slimming")) {
								slave.diet = "slimming"
								r += `<br>${slave.slaveName} has been put on a slimming exercise regime.`
							}
						} else if ((slave.muscles <= rule.muscles-2)) {
							if ((slave.diet !== "muscle building")) {
								slave.diet = "muscle building"
								r += `<br>${slave.slaveName} has been put on a muscle building exercise regime.`
							}
						} else {
							if ((slave.diet !== "healthy")) {
								slave.diet = "healthy"
								r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
							}
						}
					} else {
						if ((slave.diet !== "healthy")) {
							slave.diet = "healthy"
							r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
						}
					}
				} else if ((rule.diet == 30)) {
					if ((slave.weight > 30)) {
						if ((slave.diet !== "restricted")) {
							slave.diet = "restricted"
							r += `<br>${slave.slaveName} is too fat so her diet has been set to restricted.`
						}
						if (($arcologies[0].FSSlimnessEnthusiastResearch == 1 && (slave.drugs == "no drugs" || slave.drugs == "none"))) {
							slave.drugs = "appetite suppressors"
							r += `<br>${slave.slaveName} is too fat so she will be given weight loss pills.`
						}
					} else if ((slave.weight < 20)) {
						if ((slave.diet !== "fattening")) {
							slave.diet = "fattening"
							r += `<br>${slave.slaveName} is too skinny so her diet has been set to fattening.`
						}
						if ((slave.drugs == "appetite suppressors")) {
							slave.drugs = "no drugs"
							r += `<br>${slave.slaveName} is too skinny so she will no longer be given weight loss pills.`
						}
					} else if ((rule.muscles !== undefined) && (rule.muscles !== "no default setting") && (slave.amp != 1)) {
						if ((slave.muscles >= rule.muscles+8)) {
							if ((slave.diet !== "slimming")) {
								slave.diet = "slimming"
								r += `<br>${slave.slaveName} has been put on a slimming exercise regime.`
							}
						} else if ((slave.muscles <= rule.muscles-2)) {
							if ((slave.diet !== "muscle building")) {
								slave.diet = "muscle building"
								r += `<br>${slave.slaveName} has been put on a muscle building exercise regime.`
							}
						} else {
							if ((slave.diet !== "healthy")) {
								slave.diet = "healthy"
								r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
							}
							if ((slave.drugs == "appetite suppressors")) {
								slave.drugs = "no drugs"
								r += `<br>${slave.slaveName} is at the target weight, so she will no longer be given weight loss pills.`
							}
						}
					} else {
						if ((slave.diet !== "healthy")) {
							slave.diet = "healthy"
							r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
						}
						if ((slave.drugs == "appetite suppressors")) {
							slave.drugs = "no drugs"
							r += `<br>${slave.slaveName} is at the target weight, so she will no longer be given weight loss pills.`
						}
					}
				} else if ((rule.diet == -30)) {
					if ((slave.weight > -15)) {
						if ((slave.diet !== "restricted")) {
							slave.diet = "restricted"
							r += `<br>${slave.slaveName} is too fat so her diet has been set to restricted.`
						}
						if (($arcologies[0].FSSlimnessEnthusiastResearch == 1 && (slave.drugs == "no drugs" || slave.drugs == "none"))) {
							slave.drugs = "appetite suppressors"
							r += `<br>${slave.slaveName} is too fat so she will be given weight loss pills.`
						}
					} else if ((slave.weight < -30)) {
						if ((slave.diet !== "fattening")) {
							slave.diet = "fattening"
							r += `<br>${slave.slaveName} is too skinny so her diet has been set to fattening.`
						}
						if ((slave.drugs == "appetite suppressors")) {
							slave.drugs = "no drugs"
							r += `<br>${slave.slaveName} is too skinny so she will no longer be given weight loss pills.`
						}
					} else if ((rule.muscles !== undefined) && (rule.muscles !== "no default setting") && (slave.amp != 1)) {
						if ((slave.muscles >= rule.muscles+8)) {
							if ((slave.diet !== "slimming")) {
								slave.diet = "slimming"
								r += `<br>${slave.slaveName} has been put on a slimming exercise regime.`
							}
						} else if ((slave.muscles <= rule.muscles-2)) {
							if ((slave.diet !== "muscle building")) {
								slave.diet = "muscle building"
								r += `<br>${slave.slaveName} has been put on a muscle building exercise regime.`
							}
						} else {
							if ((slave.diet !== "healthy")) {
								slave.diet = "healthy"
								r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
							}
							if ((slave.drugs == "appetite suppressors")) {
								slave.drugs = "no drugs"
								r += `<br>${slave.slaveName} is at the target weight, so she will no longer be given weight loss pills.`
							}
						}
					} else {
						if ((slave.diet !== "healthy")) {
							slave.diet = "healthy"
							r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
						}
						if ((slave.drugs == "appetite suppressors")) {
							slave.drugs = "no drugs"
							r += `<br>${slave.slaveName} is at the target weight, so she will no longer be given weight loss pills.`
						}
					}
				} else if ((rule.diet == "attractive")) {
					if (((slave.weight > 95) || ((slave.weight > 30) && (slave.hips < 2)))) {
						if ((slave.diet !== "restricted")) {
							slave.diet = "restricted"
							r += `<br>${slave.slaveName} is too fat so her diet has been set to restricted.`
						}
						if (($arcologies[0].FSSlimnessEnthusiastResearch == 1 && (slave.drugs == "no drugs" || slave.drugs == "none"))) {
							slave.drugs = "appetite suppressors"
							r += `<br>${slave.slaveName} is too fat so she will be given weight loss pills.`
						}
					} else if (((slave.weight < -95) || ((slave.weight < -30) && (slave.hips > -2)))) {
						if ((slave.diet !== "fattening")) {
							slave.diet = "fattening"
							r += `<br>${slave.slaveName} is too skinny so her diet has been set to fattening.`
						}
						if ((slave.drugs == "appetite suppressors")) {
							slave.drugs = "no drugs"
							r += `<br>${slave.slaveName} is too skinny so she will no longer be given weight loss pills.`
						}
					} else if ((rule.muscles !== undefined) && (rule.muscles !== "no default setting") && (slave.amp != 1)) {
						if ((slave.muscles >= rule.muscles+8)) {
							if ((slave.diet !== "slimming")) {
								slave.diet = "slimming"
								r += `<br>${slave.slaveName} has been put on a slimming exercise regime.`
							}
						} else if ((slave.muscles <= rule.muscles-2)) {
							if ((slave.diet !== "muscle building")) {
								slave.diet = "muscle building"
								r += `<br>${slave.slaveName} has been put on a muscle building exercise regime.`
							}
						} else {
							if ((slave.diet !== "healthy")) {
								slave.diet = "healthy"
								r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
							}
							if ((slave.drugs == "appetite suppressors")) {
								slave.drugs = "no drugs"
								r += `<br>${slave.slaveName} is at the target weight, so she will no longer be given weight loss pills.`
							}
						}
					} else {
						if ((slave.diet !== "healthy")) {
							slave.diet = "healthy"
							r += `<br>${slave.slaveName} is at the target weight, so her diet has been normalized.`
						}
						if ((slave.drugs == "appetite suppressors")) {
							slave.drugs = "no drugs"
							r += `<br>${slave.slaveName} is at the target weight, so she will no longer be given weight loss pills.`
						}
					}
				} else if ((rule.diet == "XX")) {
					if ((slave.diet !== "XX")) {
						slave.diet = "XX"
						r += `<br>${slave.slaveName} has been put on a diet that favors feminine development.`
					}
				} else if ((rule.diet == "XY")) {
					if ((slave.diet !== "XY")) {
						slave.diet = "XY"
						r += `<br>${slave.slaveName} has been put on a diet that favors masculine development.`
					}
				} else if ((rule.diet == "XXY")) {
					if (slave.balls > 0 && (slave.ovaries == 1 || slave.mpreg == 1)) {
						if ((slave.diet !== "XXY")) {
							slave.diet = "XXY"
							r += `<br>${slave.slaveName} has been put on a diet that enhances a herm's unique sexuality.`
						}
					} else {
						if ((slave.diet !== "healthy")) {
							slave.diet = "healthy"
							r += `<br>${slave.slaveName} has been put on a standard diet since she is not a hermaphrodite.`
						}
					}
				} else if ((rule.diet == "cleansing")) {
					if (((slave.diet !== "cleansing") && (slave.health < 100))) {
						slave.diet = "cleansing"
						r += `<br>${slave.slaveName} has been put on a diet of cleansers.`
					}
				} else if ((rule.diet == "fertility")) {
					if (canGetPregnant(slave)) {
						if ((slave.diet !== "fertility")) {
							slave.diet = "fertility"
							r += `<br>${slave.slaveName} has been put on a diet to enhance fertilty.`
						}
					} else {
						if ((slave.diet !== "healthy")) {
							slave.diet = "healthy"
							if (slave.pregKnown == 0 && slave.preg > 0) {
								r += `<br>${slave.slaveName} has been put on a standard diet since tests reveal she has become pregnant.`
								slave.pregKnown = 1
							} else {
								r += `<br>${slave.slaveName} has been put on a standard diet since she is currently unable to become pregnant.`
							}
						}
					}
				} else if ((rule.diet == "cum production")) {
					if ((slave.balls > 0)) {
						if ((slave.diet !== "cum production")) {
							slave.diet = "cum production"
							r += `<br>${slave.slaveName} has been put on a diet to promote cum production.`
						}
					} else {
						if ((slave.diet !== "healthy")) {
							slave.diet = "healthy"
							r += `<br>${slave.slaveName} has been put on a standard diet since she is no longer able to produce cum.`
						}
					}
				}
			}
		} else if ((rule.muscles !== undefined) && (rule.muscles !== "no default setting") && (slave.amp != 1)) { // no diet rule, muscles only 
			if ((slave.muscles >= rule.muscles+8)) {
				if ((slave.diet !== "slimming")) {
					slave.diet = "slimming"
					r += `<br>${slave.slaveName} has been put on a slimming exercise regime.`
				}
			} else if ((slave.muscles <= rule.muscles-2)) {
				if ((slave.diet !== "muscle building")) {
					slave.diet = "muscle building"
					r += `<br>${slave.slaveName} has been put on a muscle building exercise regime.`
				}
			} else {
				if ((slave.diet !== "healthy")) {
					slave.diet = "healthy"
					r += `<br>${slave.slaveName} has achieved the target musculature, so her exercise regime has been normalized.`
				}
			}
		}
	}

	function ProcessCuratives(slave, rule) {
		<<if (def _combinedRule.curatives) && (_combinedRule.curatives != "no default setting")>>
			<<if $args[0].curatives != _combinedRule.curatives>>
				<<if _combinedRule.curatives == 2>>
					<<if $args[0].health > 100>>
						<<if ($args[0].curatives != 1)>>
						<br>$args[0].slaveName has been	put on preventatives, since curatives cannot improve her health further.
						<<set $args[0].curatives = 1>>
						<</if>>
					<<else>>
						<br>$args[0].slaveName has been	put on curatives.
						<<set $args[0].curatives = _combinedRule.curatives>>
					<</if>>
				<<else>>
					<br>$args[0].slaveName has been	<<if _combinedRule.curatives > 0>>put on preventatives<<else>>taken off health drugs<</if>>.
					<<set $args[0].curatives = _combinedRule.curatives>>
				<</if>>
			<</if>>
		<</if>>
	}

	function ProcessAphrodisiacs(slave, rule) {
		<<if (def _combinedRule.aphrodisiacs) && (_combinedRule.aphrodisiacs != "no default setting")>>
			<<if $args[0].aphrodisiacs != _combinedRule.aphrodisiacs>>
				<br>$args[0].slaveName has been	<<if _combinedRule.aphrodisiacs > 0>>put on the proper<<else>>taken off<</if>> aphrodisiacs.
				<<set $args[0].aphrodisiacs = _combinedRule.aphrodisiacs>>
			<</if>>
		<</if>>
	}

	return DefaultRules
})()

//
// Call as <<DefaultRules SlaveObject>>
// Does not use or modify $currentRule
/*
<<widget "DefaultRules">>
	<<if (def _combinedRule.clothes)>>
		<<if ($args[0].dick > 0)>>
			<<if ($args[0].balls == 0)>>
				<<if (def _combinedRule.gelding) && (_combinedRule.gelding !== "no default setting")>>
					<<if ($args[0].hormones !== _combinedRule.gelding)>>
						<<set _oldHormones = $args[0].hormones, $args[0].hormones = _combinedRule.gelding>>
						<<if $args[0].indentureRestrictions >= 2>>
							<<set $args[0].hormones = Math.clamp($args[0].hormones, -1, 1)>>
						<</if>>
						<<if $args[0].hormones != _oldHormones>>
							<br>$args[0].slaveName is a gelding, so she has been put on the appropriate hormonal regime.
						<</if>>
					<</if>>
				<</if>>
			<<elseif ($args[0].balls > 0)>>
				<<if (def _combinedRule.XY) && (_combinedRule.XY !== "no default setting")>>
					<<if ($args[0].hormones !== _combinedRule.XY)>>
						<<if ($args[0].assignment != "recruit girls")>>
							<<if ($args[0].assignment != "be the Wardeness")>>
								<<if ($args[0].assignment != "be the Madam")>>
									<<set _oldHormones = $args[0].hormones, $args[0].hormones = _combinedRule.XY>>
									<<if $args[0].indentureRestrictions >= 2>>
										<<set $args[0].hormones = Math.clamp($args[0].hormones, -1, 1)>>
									<</if>>
									<<if $args[0].hormones != _oldHormones>>
										<br>$args[0].slaveName is a shemale, so she has been put on the appropriate hormonal regime.
									<</if>>
								<</if>>
							<</if>>
						<</if>>
					<</if>>
				<</if>>
			<</if>>
		<</if>>

		<<if ($args[0].vagina > -1) && ($args[0].dick == 0) && (def _combinedRule.XX) && (_combinedRule.XX !== "no default setting")>>
			<<if ($args[0].hormones !== _combinedRule.XX)>>
				<<set _oldHormones = $args[0].hormones, $args[0].hormones = _combinedRule.XX>>
				<<if $args[0].indentureRestrictions >= 2>>
					<<set $args[0].hormones = Math.clamp($args[0].hormones, -1, 1)>>
				<</if>>
				<<if $args[0].hormones != _oldHormones>>
					<br>$args[0].slaveName is a female, so she has been put on the appropriate hormonal regime.
				<</if>>
			<</if>>
		<</if>>

		<<if $args[0].pregKnown == 1 && _combinedRule.pregSpeed != "nds" && $args[0].breedingMark != 1 && $args[0].indentureRestrictions < 1 && $args[0].broodmother == 0>>
			<<if _combinedRule.pregSpeed == "slow" && $args[0].preg < 35>>
				<<set $args[0].pregControl = "slow gestation">>
				<br>$args[0].slaveName is pregnant, so she has been put on the gestation slowing agents.
			<<elseif _combinedRule.pregSpeed == "fast" && $args[0].preg < 35 && $args[0].health > -50>>
				<<set $args[0].pregControl = "speed up">>
				<br>$args[0].slaveName is pregnant, so she has been put on rapid gestation  agents. CAUTION! Can be dangerous. Clinic supervision is recommended.
			<<elseif _combinedRule.pregSpeed == "suppress" && $args[0].preg > 34 && $args[0].health > -50>>
				<<set $args[0].pregControl = "labor supressors">>
				<br>$args[0].slaveName is ready to birth, so she has been put on labor suppressing agents.
			<<elseif _combinedRule.pregSpeed == "stimulate" && $args[0].preg >= 37 && $args[0].health > -50>>
				<<set $args[0].labor = 1,$args[0].induce = 1,$birthee = 1>>
				<br>$args[0].slaveName is ready to birth, so her labor has been stimulated.
			<<elseif _combinedRule.pregSpeed == "fast" && $args[0].pregControl == "speed up" && $args[0].health <= -50>>
				<<set $args[0].pregControl = "none">>
				<br>$args[0].slaveName is on rapid gestation agents and dangerously unhealthy, so her agent regimen has been stopped.
			<<elseif _combinedRule.pregSpeed == "suppress" && $args[0].pregControl == "labor supressors" && $args[0].health <= -50>>
				<<set $args[0].pregControl = "none">>
				<br>$args[0].slaveName is on labor supression agents and unhealthy, so her agent regimen has been stopped.
			<</if>>
		<</if>>

		<<if $args[0].fuckdoll == 0>>

		<<if (def _combinedRule.livingRules) && (_combinedRule.livingRules !== "no default setting")>>
			<<if setup.facilityCareers.includes($args[0].assignment)>>
				<br>$args[0].slaveName's living standards are controlled by her assignment.
			<<elseif (($args[0].assignment == "be your Head Girl") && ($HGSuite == 1)) || (($args[0].assignment == "guard you") && ($dojo > 1))>>
				<br>$args[0].slaveName has a private room.
			<<elseif ($args[0].fetish == "mindbroken")>>
				<<if ($args[0].livingRules !== "spare")>>
				<<set $args[0].livingRules = "spare">>
				<br>Since $args[0].slaveName is mindbroken her living standard has been set to spare.
				<</if>>
			<<elseif $args[0].livingRules !== _combinedRule.livingRules>>
				<<if _combinedRule.livingRules !== "luxurious">>
					<<if $roomsPopulation <= $rooms-0.5>>
						<<set $args[0].livingRules = _combinedRule.livingRules>>
						<br>$args[0].slaveName's living standard has been set to _combinedRule.livingRules.
						<<if $args[0].relationship >= 4>><<set $roomsPopulation += 0.5>><<else>><<set $roomsPopulation += 1>><</if>>
					<<else>>
						<<set $args[0].livingRules = "normal">>
						<br>$args[0].slaveName's living standard has been set to normal, since there is no room for her to occupy.
					<</if>>
				<<else>>
					<<set $args[0].livingRules = _combinedRule.livingRules>>
					<br>$args[0].slaveName's living standard has been set to _combinedRule.livingRules.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.speechRules) && (_combinedRule.speechRules !== "no default setting")>>
			<<if ($args[0].fetish == "mindbroken")>>
				<<if ($args[0].speechRules !== "restrictive")>>
				<<set $args[0].speechRules = "restrictive">>
				<br>Since $args[0].slaveName is mindbroken her speech rules have been set to restrictive.
				<</if>>
			<<elseif ($args[0].speechRules !== _combinedRule.speechRules)>>
				<<set $args[0].speechRules = _combinedRule.speechRules>>
				<br>$args[0].slaveName's speech rules have been set to _combinedRule.speechRules.
			<</if>>
		<</if>>

		<<if ($args[0].fetish !== "mindbroken")>>
			<<if (def _combinedRule.relationshipRules) && (_combinedRule.relationshipRules !== "no default setting")>>
				<<if ($args[0].relationshipRules !== _combinedRule.relationshipRules )>>
					<<set $args[0].relationshipRules = _combinedRule.relationshipRules >>
					<br>$args[0].slaveName's relationship rules have been set to _combinedRule.relationshipRules.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.releaseRules) && (_combinedRule.releaseRules !== "no default setting")>>
			<<set _release = 0>>
			<<if (_combinedRule.releaseRules == "restrictive")>>
				<<if ($args[0].assignment != "serve the public")>>
					<<if ($args[0].assignment != "serve in the club")>>
						<<if ($args[0].assignment != "whore")>>
							<<if ($args[0].assignment != "work in the brothel")>>
								<<if ($args[0].assignment != "please you")>>
									<<if ($args[0].assignment != "serve in the master suite")>>
										<<if ($args[0].assignment != "be a subordinate slave")>>
											<<if ($args[0].assignment != "work a glory hole")>>
												<<if ($args[0].assignment != "be confined in the arcade")>>
													<<if ($args[0].assignment != "get milked") || (($args[0].fetish != "boobs") || ($args[0].energy <= 95))>>
														<<if ($args[0].assignment != "work in the dairy") || (($args[0].fetish != "boobs") || ($args[0].energy <= 95))>>
															<<if ($args[0].assignment != "get milked") || $args[0].balls == 0>>
																<<if ($args[0].assignment != "work in the dairy") || $args[0].balls == 0>>
																	<<if ($args[0].assignment != "be your Head Girl")>>
																		<<set _release = 1>>
																	<</if>>
																<</if>>
															<</if>>
														<</if>>
													<</if>>
												<</if>>
											<</if>>
										<</if>>
									<</if>>
								<</if>>
							<</if>>
						<</if>>
					<</if>>
				<</if>>
			<<else>>
				<<set _release = 1>>
			<</if>>
			<<if ($args[0].fetish == "mindbroken") && ($args[0].releaseRules !== "permissive")>>
				<<set $args[0].releaseRules = "permissive">>
				<br>Since $args[0].slaveName is mindbroken her masturbation rules have been set to permissive.
			<<elseif ($args[0].amp === 1 || $args[0].fuckdoll > 0) && ($args[0].releaseRules === "masturbation")>>
				<<set $args[0].releaseRules = "restrictive">>
				<br>Since $args[0].slaveName is unable to masturbate, her masturbation rules have been set to restrictive.
			<<elseif (_release != 0) && ($args[0].releaseRules !== _combinedRule.releaseRules)>>
			<<set $args[0].releaseRules = _combinedRule.releaseRules>>
			<br>$args[0].slaveName's masturbation rules have been set to _combinedRule.releaseRules.
			<</if>>
		<</if>>

		<<if (def _combinedRule.standardPunishment) && (_combinedRule.standardPunishment !== "no default setting")>>
			<<if ($args[0].standardPunishment !== _combinedRule.standardPunishment)>>
				<<set $args[0].standardPunishment = _combinedRule.standardPunishment >>
				<br>$args[0].slaveName's typical punishment has been updated to _combinedRule.standardPunishment.
			<</if>>
		<</if>>

		<<if (def _combinedRule.standardReward) && (_combinedRule.standardReward !== "no default setting")>>
			<<if ($args[0].standardReward !== _combinedRule.standardReward)>>
				<<set $args[0].standardReward = _combinedRule.standardReward >>
				<br>$args[0].slaveName's typical reward has been updated to _combinedRule.standardReward.
			<</if>>
		<</if>>

		<</if>> // CLOSES FUCKDOLL CHECK 

		<<if (def _combinedRule.dietCum) && (_combinedRule.dietCum !== "no default setting")>>
			<<if $args[0].dietCum != _combinedRule.dietCum>>
				<<set $args[0].dietCum = _combinedRule.dietCum>>
				<<if $args[0].dietCum == 2>>
					<br>$args[0].slaveName has been put on a diet based on cum.
					<<set $args[0].dietMilk = 0>>
				<<elseif $args[0].dietCum == 1>>
					<br>$args[0].slaveName has had cum added to her diet.
				<<else>>
					<br>$args[0].slaveName has had cum removed from her diet.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.dietMilk) && (_combinedRule.dietMilk !== "no default setting")>>
			<<if $args[0].dietMilk != _combinedRule.dietMilk>>
				<<set $args[0].dietMilk = _combinedRule.dietMilk>>
				<<if $args[0].dietMilk == 2>>
					<br>$args[0].slaveName has been put on a diet based on human milk.
					<<set $args[0].dietCum = 0>>
				<<elseif $args[0].dietMilk == 1>>
					<br>$args[0].slaveName has had human milk added to her diet.
				<<else>>
					<br>$args[0].slaveName has had human milk removed from her diet.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.teeth) && (_combinedRule.teeth !== "no default setting")>>
			<<if (_combinedRule.teeth == "universal")>>
				<<if ($args[0].teeth == "crooked")>>
					<<set $args[0].teeth = "straightening braces">>
					<<set $cash -= $surgeryCost>>
					<br>$args[0].slaveName has been given braces for her crooked teeth.
				<<elseif ($args[0].teeth == "normal")>>
					<<set $args[0].teeth = "cosmetic braces">>
					<<set $cash -= $surgeryCost>>
					<br>$args[0].slaveName has been given cosmetic braces.
				<</if>>
			<<elseif (_combinedRule.teeth == "straighten")>>
				<<if ($args[0].teeth == "crooked")>>
					<<set $args[0].teeth = "straightening braces">>
					<<set $cash -= $surgeryCost>>
					<br>$args[0].slaveName has been given braces for her crooked teeth.
				<<elseif ($args[0].teeth == "cosmetic braces")>>
					<<set $args[0].teeth = "normal">>
					<br>$args[0].slaveName has gotten her braces off, since her teeth are straight.
				<</if>>
			<<elseif (_combinedRule.teeth == "none")>>
				<<if ($args[0].teeth == "straightening braces")>>
					<<set $args[0].teeth = "crooked">>
					<br>$args[0].slaveName has gotten her braces off.
				<<elseif ($args[0].teeth == "cosmetic braces")>>
					<<set $args[0].teeth = "normal">>
					<br>$args[0].slaveName has gotten her braces off.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.eyeColor) && (_combinedRule.eyeColor !== "no default setting")>>
			<<if ($args[0].eyeColor !== _combinedRule.eyeColor)>>
				<<set $args[0].eyeColor = _combinedRule.eyeColor>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName has been given $args[0].eyeColor contact lenses.
			<</if>>
		<</if>>

		<<if (def _combinedRule.makeup) && (_combinedRule.makeup !== "no default setting")>>
			<<if ($args[0].makeup !== _combinedRule.makeup)>>
				<<set $args[0].makeup = _combinedRule.makeup>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName has been assigned the standard makeup.
			<</if>>
		<</if>>

		<<if ($args[0].amp != 1)>>
			<<if (def _combinedRule.nails) && (_combinedRule.nails !== "no default setting")>>
				<<if ($args[0].nails !== _combinedRule.nails)>>
					<<set $args[0].nails = _combinedRule.nails>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName has been assigned the standard nails.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.hColor) && (_combinedRule.hColor !== "no default setting")>>
			<<if $args[0].bald != 1>>
				<<if ($args[0].hColor !== _combinedRule.hColor)>>
					<<set $args[0].hColor = _combinedRule.hColor>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's hair has been dyed _combinedRule.hColor.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.hStyle) && (_combinedRule.hStyle !== "no default setting")>>
			<<if $args[0].bald != 1>>
				<<if ($args[0].hStyle !== _combinedRule.hStyle)>>
					<<set $args[0].hStyle = _combinedRule.hStyle>>
					<<set $cash -= $modCost>>
					<<if (_combinedRule.hStyle == "shaved")>>
						<<set $args[0].hLength = 0>>
						<br>$args[0].slaveName's hair has been shaved.
					<<else>>
						<br>$args[0].slaveName's hair has been restyled.
					<</if>>
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.hLength) && (_combinedRule.hLength !== "no default setting")>>
			<<if $args[0].bald != 1>>
				<<if ($args[0].hLength !== _combinedRule.hLength)>>
					<<if ($args[0].hLength > _combinedRule.hLength)>>
						<<set $cash -= $modCost>>
						<br>$args[0].slaveName's hair has been cut; it
					<<else>>
						<<set $cash -= $modCost*Math.trunc((_combinedRule.hLength-$args[0].hLength)/10)>>
						<br>$args[0].slaveName has been given extensions; her hair
					<</if>>
				is now _combinedRule.hLength cm long.
				<<set $args[0].hLength = _combinedRule.hLength>>
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.pubicHColor) && (_combinedRule.pubicHColor !== "no default setting")>>
			<<if $args[0].pubicHStyle != "bald" && $args[0].pubicHStyle != "hairless">>
				<<if ($args[0].pubicHColor !== _combinedRule.pubicHColor)>>
					<<set $args[0].pubicHColor = _combinedRule.pubicHColor>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's pubic hair, if present, has been dyed _combinedRule.pubicHColor.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.pubicHStyle) && (_combinedRule.pubicHStyle !== "no default setting")>>
			<<if $args[0].pubicHStyle != "bald" && $args[0].pubicHStyle != "hairless">>
				<<if ($args[0].pubicHStyle !== _combinedRule.pubicHStyle)>>
					<<set $args[0].pubicHStyle = _combinedRule.pubicHStyle>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's pubic hair has been restyled; it is now _combinedRule.pubicHStyle.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.underArmHColor) && (_combinedRule.underArmHColor !== "no default setting")>>
			<<if $args[0].underArmHStyle != "bald" && $args[0].underArmHStyle != "hairless">>
				<<if ($args[0].underArmHColor !== _combinedRule.underArmHColor)>>
					<<set $args[0].underArmHColor = _combinedRule.underArmHColor>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's underarm hair, if present, has been dyed _combinedRule.underArmHColor.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.underArmHStyle) && (_combinedRule.underArmHStyle !== "no default setting")>>
			<<if $args[0].underArmHStyle != "bald" && $args[0].underArmHStyle != "hairless">>
				<<if ($args[0].underArmHStyle !== _combinedRule.underArmHStyle)>>
					<<set $args[0].underArmHStyle = _combinedRule.underArmHStyle>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's underarm hair has been restyled; it is now _combinedRule.underArmHStyle.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.nipplesPiercing) && (_combinedRule.nipplesPiercing !== "no default setting")>>
			<<if ($args[0].nipplesPiercing !== _combinedRule.nipplesPiercing)>>
				<<if (_combinedRule.nipplesPiercing == 0)>>
					<<set $args[0].nipplesPiercing = 0>>
					<br>$args[0].slaveName's nipple piercings have been removed.
				<<else>>
					<<set $args[0].nipplesPiercing = _combinedRule.nipplesPiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's nipples have been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.areolaePiercing) && (_combinedRule.areolaePiercing !== "no default setting")>>
			<<if ($args[0].areolaePiercing !== _combinedRule.areolaePiercing)>>
				<<if (_combinedRule.areolaePiercing == 0)>>
					<<set $args[0].areolaePiercing = 0>>
					<br>$args[0].slaveName's areolae piercings have been removed.
				<<else>>
					<<set $args[0].areolaePiercing = _combinedRule.areolaePiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's areolae have been given stud piercings.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.clitPiercing) && (_combinedRule.clitPiercing !== "no default setting")>>
			<<if ($args[0].clitPiercing !== _combinedRule.clitPiercing)>>
				<<if (_combinedRule.clitPiercing == 0)>>
					<<set $args[0].clitPiercing = 0>>
					<<if $args[0].dick > 0>>
						<br>$args[0].slaveName's frenulum piercing has been removed.
					<<else>>
						<br>$args[0].slaveName's clit piercing has been removed.
					<</if>>

				<<elseif ($args[0].vagina != -1) || ($args[0].dick != 0)>>
					<<set $args[0].clitPiercing = _combinedRule.clitPiercing>>
					<<if $args[0].dick > 0>>
						<br>$args[0].slaveName's frenulum has been pierced.
					<<else>>
						<br>$args[0].slaveName's clit has been pierced.
				<</if>>
				<<if _combinedRule.clitPiercing == 3>>
						<<set $cash -= 1000>>
					<<else>>
						<<set $cash -= $modCost>>
					<</if>>
				<</if>>
			<</if>>
		<</if>>

		<<if ($args[0].clitPiercing == 3)>>
			<<set _used = 0>>
			<<if (def _combinedRule.clitSetting) && (_combinedRule.clitSetting !== "no default setting")>>
				<<if $args[0].clitSetting !== _combinedRule.clitSetting>>
					<<set $args[0].clitSetting = _combinedRule.clitSetting, _used = 1>>
					<br>$args[0].slaveName's smart piercing has been set to $args[0].clitSetting.
				<<elseif $args[0].fetishStrength < 100>>
					<<set _used = 1>>
				<</if>>
			<</if>>
			<<if _used == 0>>
				<<if (def _combinedRule.clitSettingEnergy) && (_combinedRule.clitSettingEnergy !== "no default setting")>>
					<<if $args[0].energy < _combinedRule.clitSettingEnergy>>
						<<if $args[0].clitSetting !== "all">>
							<br>$args[0].slaveName's smart piercing has been set to enhance libido.
						<</if>>
						<<set $args[0].clitSetting = "all", _used = 1>>
					<<elseif $args[0].energy >= _combinedRule.clitSettingEnergy + 10>>
						<<if $args[0].clitSetting !== "none">>
							<br>$args[0].slaveName's smart piercing has been set to suppress libido.
						<</if>>
						<<set $args[0].clitSetting = "none", _used = 1>>
					<</if>>
				<</if>>
			<</if>>
			<<if _used == 0>>
				<<if (def _combinedRule.clitSettingXY) && (_combinedRule.clitSettingXY !== "no default setting")>>
					<<if $args[0].attrXY < _combinedRule.clitSettingXY>>
						<<if $args[0].clitSetting !== "men">>
							<br>$args[0].slaveName's smart piercing has been set to encourage attraction to men.
						<</if>>
						<<set $args[0].clitSetting = "men", _used = 1>>
					<<elseif $args[0].attrXY >= _combinedRule.clitSettingXY + 10>>
						<<if $args[0].clitSetting !== "anti-men">>
							<br>$args[0].slaveName's smart piercing has been set to discourage attraction to men.
						<</if>>
						<<set $args[0].clitSetting = "anti-men", _used = 1>>
					<</if>>
				<</if>>
			<</if>>
			<<if _used == 0>>
				<<if (def _combinedRule.clitSettingXX) && (_combinedRule.clitSettingXX !== "no default setting")>>
					<<if $args[0].attrXX < _combinedRule.clitSettingXX>>
						<<if $args[0].clitSetting !== "women">>
							<br>$args[0].slaveName's smart piercing has been set to encourage attraction to women.
						<</if>>
						<<set $args[0].clitSetting = "women", _used = 1>>
					<<elseif $args[0].attrXX >= _combinedRule.clitSettingXX + 10>>
						<<if $args[0].clitSetting !== "anti-women">>
							<br>$args[0].slaveName's smart piercing has been set to discourage attraction to women.
						<</if>>
						<<set $args[0].clitSetting = "anti-women", _used = 1>>
					<</if>>
				<</if>>
			<</if>>
		<</if>>

		<<if ($args[0].vagina != -1)>>
			<<if (def _combinedRule.vaginaPiercing) && (_combinedRule.vaginaPiercing !== "no default setting")>>
				<<if ($args[0].vaginaPiercing !== _combinedRule.vaginaPiercing)>>
					<<if (_combinedRule.vaginaPiercing == 0)>>
						<<set $args[0].vaginaPiercing = 0>>
						<br>$args[0].slaveName's labia piercings have been removed.
					<<else>>
						<<set $args[0].vaginaPiercing = _combinedRule.vaginaPiercing>>
						<<set $cash -= $modCost>>
						<br>$args[0].slaveName's pussylips have been pierced.
					<</if>>
				<</if>>
			<</if>>
		<</if>>

		<<if ($args[0].dick > 0)>>
			<<if (def _combinedRule.dickPiercing) && (_combinedRule.dickPiercing !== "no default setting")>>
				<<if ($args[0].dickPiercing !== _combinedRule.dickPiercing)>>
					<<if (_combinedRule.dickPiercing == 0)>>
						<<set $args[0].dickPiercing = 0>>
						<br>$args[0].slaveName's shaft piercings have been removed.
					<<else>>
						<<set $args[0].dickPiercing = _combinedRule.dickPiercing>>
						<<set $cash -= $modCost>>
						<br>$args[0].slaveName's shaft has been pierced.
					<</if>>
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.anusPiercing) && (_combinedRule.anusPiercing !== "no default setting")>>
			<<if ($args[0].anusPiercing !== _combinedRule.anusPiercing)>>
				<<if (_combinedRule.anusPiercing == 0)>>
					<<set $args[0].anusPiercing = 0>>
					<br>$args[0].slaveName's asshole piercings have been removed.
				<<else>>
					<<set $args[0].anusPiercing = _combinedRule.anusPiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's asshole has been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.lipsPiercing) && (_combinedRule.lipsPiercing !== "no default setting")>>
			<<if ($args[0].lipsPiercing !== _combinedRule.lipsPiercing)>>
				<<if (_combinedRule.lipsPiercing == 0)>>
					<<set $args[0].lipsPiercing = 0>>
					<br>$args[0].slaveName's lip piercings have been removed.
				<<else>>
					<<set $args[0].lipsPiercing = _combinedRule.lipsPiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's lips have been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.tonguePiercing) && (_combinedRule.tonguePiercing !== "no default setting")>>
			<<if ($args[0].tonguePiercing !== _combinedRule.tonguePiercing)>>
				<<if (_combinedRule.tonguePiercing == 0)>>
					<<set $args[0].tonguePiercing = 0>>
					<br>$args[0].slaveName's tongue piercings have been removed.
				<<else>>
					<<set $args[0].tonguePiercing = _combinedRule.tonguePiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's tongue has been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.earPiercing) && (_combinedRule.earPiercing !== "no default setting")>>
			<<if ($args[0].earPiercing !== _combinedRule.earPiercing)>>
				<<if (_combinedRule.earPiercing == 0)>>
					<<set $args[0].earPiercing = 0>>
					<br>$args[0].slaveName's ear piercings have been removed.
				<<else>>
					<<set $args[0].earPiercing = _combinedRule.earPiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's ears have been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.nosePiercing) && (_combinedRule.nosePiercing !== "no default setting")>>
			<<if ($args[0].nosePiercing !== _combinedRule.nosePiercing)>>
				<<if (_combinedRule.nosePiercing == 0)>>
					<<set $args[0].nosePiercing = 0>>
					<br>$args[0].slaveName's nose piercing has been removed.
				<<else>>
					<<set $args[0].nosePiercing = _combinedRule.nosePiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's nose has been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.eyebrowPiercing) && (_combinedRule.eyebrowPiercing !== "no default setting")>>
			<<if ($args[0].eyebrowPiercing !== _combinedRule.eyebrowPiercing)>>
				<<if (_combinedRule.eyebrowPiercing == 0)>>
					<<set $args[0].eyebrowPiercing = 0>>
					<br>$args[0].slaveName's eyebrow piercings have been removed.
				<<else>>
					<<set $args[0].eyebrowPiercing = _combinedRule.eyebrowPiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's eyebrows have been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.navelPiercing) && (_combinedRule.navelPiercing !== "no default setting")>>
			<<if ($args[0].navelPiercing !== _combinedRule.navelPiercing)>>
				<<if (_combinedRule.navelPiercing == 0)>>
					<<set $args[0].navelPiercing = 0>>
					<br>$args[0].slaveName's navel piercing have been removed.
				<<else>>
					<<set $args[0].navelPiercing = _combinedRule.navelPiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's navel has been pierced.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.corsetPiercing) && (_combinedRule.corsetPiercing !== "no default setting")>>
			<<if ($args[0].corsetPiercing !== _combinedRule.corsetPiercing)>>
				<<if (_combinedRule.corsetPiercing == 0)>>
					<<set $args[0].corsetPiercing = 0>>
					<br>$args[0].slaveName's corset piercings have been removed.
				<<else>>
					<<set $args[0].corsetPiercing = _combinedRule.corsetPiercing>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName has been given a set of corset piercings.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.boobsTat) && (_combinedRule.boobsTat !== "no default setting")>>
			<<if ($args[0].boobsTat !== _combinedRule.boobsTat)>>
				<<set $args[0].boobsTat = _combinedRule.boobsTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's chest has been tattooed.
			<</if>>
		<</if>>

		<<if (def _combinedRule.buttTat) && (_combinedRule.buttTat !== "no default setting")>>
			<<if ($args[0].buttTat !== _combinedRule.buttTat)>>
				<<set $args[0].buttTat = _combinedRule.buttTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's butt has been tattooed.
			<</if>>
		<</if>>

		<<if (def _combinedRule.vaginaTat) && (_combinedRule.vaginaTat !== "no default setting")>>
			<<if ($args[0].vaginaTat !== _combinedRule.vaginaTat)>>
				<<set $args[0].vaginaTat = _combinedRule.vaginaTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's abdomen has been tattooed.
			<</if>>
		<</if>>

		<<if ($args[0].dick > 0)>>
			<<if (def _combinedRule.dickTat) && (_combinedRule.dickTat !== "no default setting")>>
				<<if ($args[0].dickTat !== _combinedRule.dickTat)>>
					<<set $args[0].dickTat = _combinedRule.dickTat>>
					<<set $cash -= $modCost>>
					<br>$args[0].slaveName's dick has been tattooed.
				<</if>>
			<</if>>
		<</if>>

		<<if (def _combinedRule.lipsTat) && (_combinedRule.lipsTat !== "no default setting")>>
			<<if ($args[0].lipsTat !== _combinedRule.lipsTat)>>
				<<set $args[0].lipsTat = _combinedRule.lipsTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's face has been tattooed.
			<</if>>
		<</if>>

		<<if (def _combinedRule.anusTat) && (_combinedRule.anusTat !== "no default setting")>>
			<<if ($args[0].anusTat !== _combinedRule.anusTat)>>
				<<set $args[0].anusTat = _combinedRule.anusTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's asshole has been modded.
			<</if>>
		<</if>>

		<<if (def _combinedRule.shouldersTat) && (_combinedRule.shouldersTat !== "no default setting")>>
			<<if ($args[0].shouldersTat !== _combinedRule.shouldersTat)>>
				<<set $args[0].shouldersTat = _combinedRule.shouldersTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's shoulders have been tattooed.
			<</if>>
		<</if>>

		<<if (def _combinedRule.armsTat) && (_combinedRule.armsTat !== "no default setting")>>
			<<if ($args[0].armsTat !== _combinedRule.armsTat)>>
				<<set $args[0].armsTat = _combinedRule.armsTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's arms have been tattooed.
			<</if>>
		<</if>>

		<<if (def _combinedRule.legsTat) && (_combinedRule.legsTat !== "no default setting")>>
			<<if ($args[0].legsTat !== _combinedRule.legsTat)>>
				<<set $args[0].legsTat = _combinedRule.legsTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's legs have been tattooed.
			<</if>>
		<</if>>

		<<if (def _combinedRule.stampTat) && (_combinedRule.stampTat !== "no default setting")>>
			<<if ($args[0].stampTat !== _combinedRule.stampTat)>>
				<<set $args[0].stampTat = _combinedRule.stampTat>>
				<<set $cash -= $modCost>>
				<br>$args[0].slaveName's lower back has been tattooed.
			<</if>>
		<</if>>

		<<if (def _combinedRule.pornFameSpending) && (_combinedRule.pornFameSpending !== "no default setting")>>
			<<if ($args[0].prestige < 3)>>
				<<if ($args[0].pornFameSpending !== _combinedRule.pornFameSpending)>>
					<<set $args[0].pornFameSpending = _combinedRule.pornFameSpending>>
					<br>$args[0].slaveName's porn publicity has been corrected.
				<</if>>
			<</if>>
		<</if>>

		<<if (_combinedRule.autoBrand == 1)>>
			<<if ($args[0].brand == 0)>>
				<<if ($args[0].health > -20)>>
					<<set $args[0].brand = $brandDesign>>
					<<set $args[0].brandLocation = $brandTarget>>
					<<if ($args[0].devotion < 18)>><<set $args[0].devotion -= 5>><</if>>
					<<set $args[0].trust -= 5>>
					<<set $args[0].health -= 10>>
					<br>$args[0].slaveName has been branded, with @@.gold;fear@@<<if ($args[0].devotion < 18)>>, @@.mediumorchid;regard@@,<</if>> and @@.red;health@@ consequences.
				<</if>>
			<</if>>
		<</if>>
	<</if>> // closes we have at least one non-default rule setting 
<</widget>>
*/
